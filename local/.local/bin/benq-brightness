#!/usr/bin/env bash
# Clean BenQ brightness control (VCP 0x10)
# Prints icon+percent on show/up/down/set, silent if no monitor.
set -euo pipefail

BUS="${MON_BUS:-1}"
STEP="${STEP:-10}" # percent step
ACTION="${1:-show}"
VALUE="${2:-}"

# Icon for external monitor
ICON_MONITOR=""

DDC=(/usr/bin/timeout 0.6s /usr/bin/ddcutil
  --sleep-multiplier=0.2 --bus="$BUS")

# returns "cur max" or fails
get_cur_max() {
  local out nums n
  out="$("${DDC[@]}" -t getvcp 10 2>/dev/null || true)"
  [[ -n "$out" ]] || return 1
  # grab all numbers, last two are cur and max
  mapfile -t nums < <(grep -oE '[0-9]+' <<<"$out")
  n=${#nums[@]}
  ((n >= 2)) || return 1
  printf '%s %s\n' "${nums[n - 2]}" "${nums[n - 1]}"
}

percent() {
  local cur="$1" max="$2"
  # integer rounding
  printf '%d\n' $(((cur * 100 + max / 2) / max))
}

clamp() {
  local v="$1" lo="$2" hi="$3"
  ((v < lo)) && v=$lo
  ((v > hi)) && v=$hi
  printf '%s\n' "$v"
}

main() {
  local cur max tgt new p

  case "$ACTION" in
  show)
    if ! read -r cur max < <(get_cur_max); then
      # no monitor → silent
      exit 0
    fi
    p=$(percent "$cur" "$max")
    echo "$ICON_MONITOR $p%"
    ;;
  up | down | set)
    if ! read -r cur max < <(get_cur_max); then
      # no monitor → nothing to do
      exit 0
    fi
    case "$ACTION" in
    up) tgt=$((cur + (STEP * max) / 100)) ;;
    down) tgt=$((cur - (STEP * max) / 100)) ;;
    set)
      : "${VALUE:?Provide percent 0-100}"
      tgt=$(((VALUE * max + 50) / 100))
      ;;
    esac
    new=$(clamp "$tgt" 0 "$max")
    # apply
    "${DDC[@]}" setvcp 10 "$new" --noverify >/dev/null
    p=$(percent "$new" "$max")
    echo "$ICON_MONITOR $p%"
    ;;
  *)
    echo "Usage: benq-brightness.sh {show|up|down|set 0-100}" >&2
    exit 2
    ;;
  esac
}

main "$@"
